<launch>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="paused" value="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find imav_sim)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find imav_sim)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find imav_sim)/worlds/outdoor_imav.world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="$(arg paused)"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <!-- Yellow -->
  <group ns="magnus">
    <include file="$(find imav_sim)/launch/spawn_mav.launch">
      <arg name="mav_name" value="magnus" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="firefly"/>
      <arg name="y" value="-1"/>
    </include>
     <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_firefly.yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_firefly.yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_firefly.yaml" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="log" args="0 0 6 0 5"/>
    <node name="gripper" pkg="imav_sim" type="gripper_control" output="log" />
  </group>
  
  <!-- Orange -->
  <group ns="vega">
    <include file="$(find imav_sim)/launch/spawn_mav.launch">
      <arg name="mav_name" value="vega" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="firefly"/>
      <arg name="y" value="-2"/>
    </include>
     <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_firefly.yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_firefly.yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_firefly.yaml" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="log" args="0 1 6 0 5"/>
    <node name="gripper" pkg="imav_sim" type="gripper_control" output="log" />
  </group>

  <!-- Red -->
  <group ns="icarus">
    <include file="$(find imav_sim)/launch/spawn_mav.launch">
      <arg name="mav_name" value="icarus" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="firefly"/>
      <arg name="y" value="-3.0"/>
    </include>
     <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_firefly.yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_firefly.yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="log">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_firefly.yaml" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="log" args="0 -1 6 0 5"/>
    <node name="gripper" pkg="imav_sim" type="gripper_control" output="log" />
     
    <node name="input" type="input" pkg="aruco_ros">
        <remap from="colour_image" to="nadir_cam/image_raw" />
    </node>  

    <node pkg="aruco_ros" type="single" name="aruco_single">
        <remap from="aruco_single/camera_info" to="nadir_cam/camera_info" />
        <remap from="aruco_single/threshold_image" to="threshold_image" />
        <param name="image_is_rectified" value="True"/>
        <param name="marker_size"        value="0.1"/>
        <param name="marker_id"          value="582"/>
        <param name="reference_frame"    value=" "/>   
        <param name="camera_frame"       value="stereo_gazebo"/>
        <param name="marker_frame"       value="aruco_marker_frame" />
        <param name="corner_refinement"  value="LINES" />
    </node>

    <node name="object_pos" type="object_pos" pkg="aruco_ros">
        <remap from="odometry" to="ground_truth/pose" />
        <remap from="imu/data" to="imu" />
        <remap from="aruco_single/pose" to="aruco_single/pose" />
        <remap from="object/pose" to="object/pose" />
    </node>

    <node pkg="aruco_ros" type="filter.py" name="image_filter" >
        <remap from="command" to="filter/pose" />
        <remap from="object/pose" to="object/pose" />
    </node>

  </group>

</launch>
